cmake_minimum_required(VERSION 3.0.0...3.24 FATAL_ERROR)
project(wgpu-native VERSION 1.0.0)

set(WGPU ${CMAKE_CURRENT_SOURCE_DIR})

# A pre-compiled target (IMPORTED) that is a dynamically
# linked library (SHARED, meaning .dll, .so or .dylib).
add_library(wgpu_native SHARED IMPORTED GLOBAL)
add_library(wgpu_native_static STATIC IMPORTED GLOBAL)

if (WIN32)

	set(WGPU_RUNTIME_LIB ${WGPU}/lib/wgpu_native.dll)
	set_target_properties(wgpu_native
		PROPERTIES
			IMPORTED_LOCATION "${WGPU_RUNTIME_LIB}"
			IMPORTED_IMPLIB "${WGPU_RUNTIME_LIB}.lib"
			INTERFACE_INCLUDE_DIRECTORIES "${WGPU}/include"
	)

	target_link_libraries(wgpu_native_static INTERFACE d3dcompiler.lib Ws2_32.lib Userenv.lib ntdll.lib Bcrypt.lib Opengl32.lib)
		set_target_properties(wgpu_native_static
			PROPERTIES
				IMPORTED_LOCATION "${WGPU}/lib/wgpu_native.dll"
				IMPORTED_IMPLIB "${WGPU}/lib/wgpu_native.dll"
				INTERFACE_INCLUDE_DIRECTORIES "${WGPU}/include"
		)	

elseif(UNIX AND NOT APPLE)

	set(WGPU_RUNTIME_LIB ${WGPU}/lib/libwgpu_native.so)
	set_target_properties(wgpu_native
		PROPERTIES
			IMPORTED_LOCATION "${WGPU_RUNTIME_LIB}"
			IMPORTED_NO_SONAME TRUE
			INTERFACE_INCLUDE_DIRECTORIES "${WGPU}/include"
	)

	set_target_properties(wgpu_native_static
		PROPERTIES
			IMPORTED_LOCATION "${WGPU}/lib/libwgpu_native.a"
			INTERFACE_INCLUDE_DIRECTORIES "${WGPU}/include"
	)

elseif(APPLE)

	set(WGPU_RUNTIME_LIB ${WGPU}/lib/libwgpu_native.dylib)
	set_target_properties(
		wgpu_native
		PROPERTIES
			IMPORTED_LOCATION "${WGPU_RUNTIME_LIB}"
			INTERFACE_INCLUDE_DIRECTORIES "${WGPU}/include"
	)

	target_link_libraries(wgpu_native_static 
		INTERFACE 
			"-framework Metal" 
			"-framework QuartzCore" 
			"-framework MetalKit"
	)
	set_target_properties(wgpu_native_static
		PROPERTIES
			IMPORTED_LOCATION "${WGPU}/lib/libwgpu_native.a"
			INTERFACE_INCLUDE_DIRECTORIES "${WGPU}/include"
	)

else()

	message(FATAL_ERROR "Platform not supported by this release of UFO.")

endif()

message(STATUS "Using WebGPU runtime from '${WGPU_RUNTIME_LIB}'")
set(WGPU_RUNTIME_LIB ${WGPU_RUNTIME_LIB} PARENT_SCOPE)
set(WGPU_RUNTIME_LIB ${WGPU_RUNTIME_LIB} CACHE INTERNAL "Path to the WebGPU library binary")

target_include_directories(wgpu_native 
	INTERFACE
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/wgpu>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/webgpu>
		$<INSTALL_INTERFACE:include/webgpu>
)

target_include_directories(wgpu_native_static 
	INTERFACE
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/wgpu>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/webgpu>
		$<INSTALL_INTERFACE:include/webgpu>
)

# The application's binary must find wgpu.dll or libwgpu.so at runtime,
# so we automatically copy it (it's called WGPU_RUNTIME_LIB in general)
# next to the binary.
# Also make sure that the binarie's RPATH is set to find this shared library.
function(target_copy_webgpu_binaries Target)
	add_custom_command(
		TARGET ${Target} POST_BUILD
		COMMAND
			${CMAKE_COMMAND} -E copy_if_different
			${WGPU_RUNTIME_LIB}
			$<TARGET_FILE_DIR:${Target}>
		COMMENT
			"Copying '${WGPU_RUNTIME_LIB}' to '$<TARGET_FILE_DIR:${Target}>'..."
	)

	if(APPLE)
		# Bug fix, there might be a cleaner way to do this but no INSTALL_RPATH
		# or related target properties seem to be a solution.
		set_target_properties(${Target} PROPERTIES INSTALL_RPATH "./")
		if(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
			set(ARCH_DIR aarch64)
		else()
			set(ARCH_DIR ${CMAKE_SYSTEM_PROCESSOR})
		endif()
		add_custom_command(
			TARGET ${Target} POST_BUILD
			COMMAND
				${CMAKE_INSTALL_NAME_TOOL} "-change"
				"/Users/runner/work/wgpu-native/wgpu-native/target/${ARCH_DIR}-apple-darwin/release/deps/libwgpu_native.dylib"
				"@executable_path/libwgpu_native.dylib"
				"$<TARGET_FILE:${Target}>"
			VERBATIM
		)
	endif()
endfunction()